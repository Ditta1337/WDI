from math import sqrt
from math import inf
from random import randint
from warnings import resetwarnings

def isPrime(num):
    if num < 2:
        return False
    if num == 2:
        return True

    for i in range(2, int(num**(0.5)) + 1):
        if num % i == 0:
            return False
    return True

def zadanie1():

    number = int(input())

    def rek(num, result = 0, position = 0, b = False):
        if num == 0:
            if result > 9 and b and isPrime(result) and result != number:
                print(result)
            return 
        rek(num // 10, result, position, True) 
        rek(num // 10, result + ((num % 10) * 10 ** position), position + 1, b)

    print(rek(number))


def waga(n):
    counter = 0
    
    if n % 2 == 0:
        counter += 1
        while n % 2 == 0:
            n = n//2
    
    for i in range(3, int(sqrt(n))+1, 2):
        if n % i == 0:
            counter += 1
            while n % i == 0:
                n = n // i
    
    if n > 2:
        counter += 1

    return counter

def canDivide(T):

    sums  = [0,0,0] # ilość podzbiorów

    def r_canDivide(index,sums):

        if index == len(T):
            all_even = 1
            for i in range(len(sums)-1):    # sprawdzam czy są równe jeśli wszystkie zostały dodane
                if sums[i] != sums[i+1]:
                    all_even = 0
                    break

            if all_even:
                return True

            return False
    
        for i in range(len(sums)):  # rekurencyjnie dodaje wagę do każdego podzbioru
            sums[i] += waga(T[index])
            if (r_canDivide(index+1,sums)):
                return True
            sums[i] -= waga(T[index])
        
        return False
    
    return r_canDivide(0,sums)

def cheapest_path(T,k):

    def r_cheapest_path(curr_x,curr_y,result = 0):
        if curr_y == 8:
            return result

        if curr_x < 0 or curr_x >= 8:
            return inf
        
        return(min([r_cheapest_path(curr_x+1,curr_y+1,result+T[curr_y][curr_x]), r_cheapest_path(curr_x-1,curr_y+1,result+T[curr_y][curr_x]), r_cheapest_path(curr_x,curr_y+1,result+T[curr_y][curr_x])]))

    return r_cheapest_path(k,0)

def zadanie4():
    n = int(input())
    counter = 0
    Tab = [[ 0 for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(n):
            print(Tab[i][j], end=" ")
        print()

    def rekKnight(y, x, tab):
        if x >= 0 and x <= (n-1)  and y >= 0 and y <= (n-1):
            if tab[y][x] == 0:
                tab[y][x] = 1
                rekKnight(y+2, x+1, tab)
                rekKnight(y+2, x-1, tab)
                rekKnight(y-2, x+1, tab)
                rekKnight(y-2, x-1, tab)
                rekKnight(y+1, x+2, tab)
                rekKnight(y-1, x+2, tab)
                rekKnight(y+1, x-2, tab)
                rekKnight(y-1, x-2, tab)
            else: 
                return 0
        else: 
            return 0

    rekKnight(1, 1, Tab)

    for i in range(n):
        for j in range(n):
            print(Tab[i][j], end=" ")
        print()

def zadanie5():
    Tab = [1, 1, 0, 1, 0, 0]
    Length = len(Tab)

    def bitMask(length, num):
        tab = [0 for _ in range(length)]
        i = 0
        while num > 0:
            tab[i] = num % 2
            num //= 2
            i += 1
        return tab
    
    def getNums(tab, bit_tab):
        res_str_bit = "" + str(tab[0])
        for i in range(len(bit_tab) - 1):
            if bit_tab[i] == 1:
                res_str_bit += "|"
            res_str_bit += str(tab[i+1])
        res_str = res_str_bit.split("|")
        res_int = []
        for i in res_str:
            res_int.append(int(i,2))
        return res_int

    def allPrimes(tab):
        for i in tab:
            if isPrime(i) == False:
                return False
        return True

    def validFlag(bit_tab):
        counter = 1
        for i in bit_tab:
            if counter > 30:
                return False
            if i == 1:
                counter = 0
            counter += 1
        return True

    def recCheck(tab, length, mask = 1):
        if mask == 2**(length-1):
            return False
        bit_tab = bitMask(length, mask)
        if validFlag(bit_tab):
            if allPrimes(getNums(tab, bit_tab)):
                return True
        return recCheck(tab, length, mask + 1)

    print(recCheck(Tab, Length))

def zadanie6():
    Tab = [1,7,3,5,11,2]
    Length = len(Tab)

    def bitMask(length, num):
        bit_tab = [0 for _ in range(length)]
        i = 0
        while num > 0:
            bit_tab[i] = num%2
            num //= 2
            i += 1
        return bit_tab

    def isSumEqualIndexSum(tab, bit_tab): #return num of taken elements
        index_sum = 0
        number_sum = 0
        for i in range(len(bit_tab)):
            if bit_tab[i] == 1:
                index_sum += i
                number_sum += tab[i]
        if (index_sum == number_sum) and index_sum != 0:
            return number_sum
        return 0

    def leastIndexes(bit_tab):
        counter = 0
        for i in bit_tab:
            if i == 1:
                counter += 1
        return counter

    def recTask(tab, length, num = inf, minIndexSum = inf, mask = 1):
        if mask == 2**length:
            if num < inf:
                return num
            return "no such subsequence"
        
        bit_tab = bitMask(length, mask)

        sumFlag = isSumEqualIndexSum(tab, bit_tab)

        if sumFlag != 0:
            if leastIndexes(bit_tab) < minIndexSum:
                minIndexSum = leastIndexes(bit_tab)
                num = sumFlag

        return recTask(tab, length, num, minIndexSum, mask + 1)

    print(recTask(Tab, Length))

def zadanie7():
    Weights = [1, 4, 5, 6, 8, 11]
    Length = len(Weights)
    X = 4

    def rekWeight(tab, length, weight, sumS = 0, index = 0):
        if index == length:
            return False
        if sumS == weight:
            return True
        return rekWeight(tab, length, weight, sumS + tab[index], index + 1) or rekWeight(tab, length, weight, sumS, index + 1) 

    print(rekWeight(Weights, Length, X))


def zadanie8():
    Weights = [1,3,5,10,16,24]
    X = 23
    
    def rekWeightTwo(tab, weight, sumS = 0, index = 0):
        if index == len(tab):
            return False
        if sumS == weight:
            return sumS
        return rekWeightTwo(tab, weight, sumS + tab[index], index + 1) or rekWeightTwo(tab, weight, sumS, index + 1) or rekWeightTwo(tab, weight + tab[index], sumS, index + 1)

    print(rekWeightTwo(Weights, X))

def zadanie9():
    Weights = [1,3,5,10,16,24]
    X = 29

    
    def rekWeightTwo(tab, weight, index = 0, weights = []):
        if index == len(tab):
            return False
        if weight == 0:
            print(weights)
            return True
        return rekWeightTwo(tab, weight - tab[index], index + 1, weights + [tab[index]]) or rekWeightTwo(tab, weight, index + 1, weights) or rekWeightTwo(tab, weight + tab[index], index + 1, weights + [-tab[index]])

    print(rekWeightTwo(Weights, X))
    
def zadanie14():
    def rekHanoi(num, start, help, finish):
        if num > 0:
            rekHanoi(num - 1, start, finish, help)
            if start:
                finish.append(start.pop())
            rekHanoi(num - 1, help, start, finish)

        

    start = [4, 3, 2, 1]
    help = []
    finish = []

    rekHanoi(len(start), start, help, finish)    

    print(start)
    print(help)
    print(finish)

def zadanie16():
    def wordToAscii(word):
        ret_val = 0
        tab = [char for char in word]
        for letter in tab:
            ret_val += ord(letter)
        return ret_val


    def howManyVowels(word):
        ret_val = 0
        vowels = ["a","e","i","o","u","y"]
        tab = [char for char in word]
        for letter in tab:
            if letter in vowels:
                ret_val += 1
        return ret_val


    def bitMap(length, num):
        bit_map = [0 for _ in range(length)]
        i = 0
        while num > 0:
            bit_map[i] = num % 2
            num //= 2
            i += 1
        return bit_map


    def getWord(word, bit_map):
        ret_word = ""
        tab = [char for char in word]
        for i in range(len(tab)):
            if bit_map[i] == 1:
                ret_word += tab[i]
        return ret_word


    def rekCheck(word1, word2, mask = 1):
        if mask == 2**len(word2):
            return False
        bit_mask = bitMap(len(word2), mask)

        word1_int = wordToAscii(word1)
        word2_int = wordToAscii(getWord(word2, bit_mask))
        
        word1_vow = howManyVowels(word1)
        word2_vow = howManyVowels(getWord(word2, bit_mask))

        if (word1_int == word2_int) and (word1_vow == word2_vow):
            return True
        else:
            return rekCheck(word1, word2, mask + 1)

    print(rekCheck("exe", "ula"))

def zadanie17():

    #def BitMask(length, num):
    #    bit_mask = [0 for _ in range(length)]
    #    i = 0
    #    while num > 0:
    #        bit_mask[i] = num % 2
    #        num //= 2
    #   return bit_mask

    def IsValid(thenums, num1, num2):
        indexes1 = 0
        check1 = 0
        indexes2 = 0
        check2 = 0


        ret_val = []

        num1_list = list(str(num1))
        num2_list = list(str(num2))

        for num in thenums:
            flag1 = 0
            flag2 = 0
            for i in range(len(num1_list)):
                if num1_list[i] in num:
                    indexes1 = i
                    if indexes1 >= check1:
                        check1 = indexes1
                    else: 
                        flag1 = 1
            for j in range(len(num2_list)):
                if num2_list[j] in num:
                    indexes2 = i
                    if indexes2 >= check2:
                        check2 = indexes2
                    else: 
                        flag2 = 1
            if flag2 == 0 and flag1 == 0:
                return num

    def GetNum(num1, num2):
        ret_val = []
        tab = list(str(num2) + str(num1))

        print(tab)
            
        def Permutation(tab):

            if len(tab) == 0:
                return []

            if len(tab) == 1:
                return [tab]

            ret = [] 

            for i in range(len(tab)):
                m = tab[i]
                rem_tab = tab[:i] + tab[i+1:]
                for p in Permutation(rem_tab):
                    ret.append([m] + p)
            return ret
        
        ret_val = Permutation(tab)
        
        return ret_val

    print(IsValid(GetNum(123, 45), 123, 45))

def zadanie15():
    N = 8
    board = [[0 for i in range(N)] for i in range(N)]
    #board = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]

    def isValid(board, row = 0, col = 0):
        global flag
        pos_of_queens = []
        length = len(board[0])

        finish_board = [[0 for i in range(length)] for i in range(length)]
        help_board = [[0 for i in range(length)] for i in range(length)]

        for i in range(length):
            for j in range(length):
                if board[i][j] == 1:
                    pos_of_queens.append([i, j])
        

        for pos in pos_of_queens:
            finish_board[pos[0]][pos[1]] = 1
            #print(pos)
            for i in range(length): #kolumny
                help_board[i][pos[1]] = 1
            
            for i in range(length): #wiersze
                help_board[pos[0]][i] = 1

            pos0_cpy = pos[0]
            pos1_cpy = pos[1]

            while (pos0_cpy + 1 <= length - 1) and (pos1_cpy - 1 >= 0): 
                pos0_cpy += 1
                pos1_cpy -= 1
                help_board[pos0_cpy][pos1_cpy] = 1

            pos0_cpy = pos[0]
            pos1_cpy = pos[1]

            while (pos0_cpy - 1 >= 0) and (pos1_cpy + 1 <= length - 1): 
                pos0_cpy -= 1
                pos1_cpy += 1
                help_board[pos0_cpy][pos1_cpy] = 1

            pos0_cpy = pos[0]
            pos1_cpy = pos[1]

            while (pos0_cpy + 1 <= length - 1) and (pos1_cpy + 1 <= length - 1): 
                pos0_cpy += 1
                pos1_cpy += 1
                help_board[pos0_cpy][pos1_cpy] = 1

            pos0_cpy = pos[0]
            pos1_cpy = pos[1]

            while (pos0_cpy - 1 >= 0) and (pos1_cpy - 1 >= 0): 
                pos0_cpy -= 1
                pos1_cpy -= 1
                help_board[pos0_cpy][pos1_cpy] = 1

        #for a in help_board:
        #   print(a)
        
        counter = 0
        for a in help_board:
            for b in a:
                if b == 1:
                    counter += 1
        if counter == length*length and len(pos_of_queens) == 8:
            for c in finish_board:
                print(c)
            print()


        if help_board[row][col] == 0:
            return True
        else: 
            return False
    
    #print(isValid(board, 2, 2))

    def rekCheck(board, finish_board = [],  col = 0):
        if col >= 8:
            print(finish_board)              
            return True

        for i in range(8):

            if(isValid(board, i, col)):
                board[i][col] = 1

                if (rekCheck(board, finish_board, col+1)):
                    finish_board = isValid(board, i ,col)
                    return True

                board[i][col] = 0

        return False

    print(rekCheck(board))

            

            



if __name__ == "__main__":

    zadanie4()

   
